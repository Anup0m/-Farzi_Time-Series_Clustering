# -*- coding: utf-8 -*-
"""Covid19_Cases.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k1JJL7nbmTfmiDJwSUYiYcfFVO27rGr3
"""

!pip install --upgrade pandas matplotlib scikit-learn

# Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler

# Step 1: Simulate COVID-19 Dataset
# Upload your CSV file to Colab and update the filename
data = pd.read_csv('day_wise.csv')

# Adjust column names as per your dataset (Example: ObservationDate -> Date)
data['Date'] = pd.to_datetime(data['Date'])  # Adjust column names
data = data.groupby('Date').sum().reset_index()  # Aggregate by date
data = data[['Date', 'Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases', 'New deaths', 'New recovered', 'No. of countries']]

# Calculate the additional metrics
data['Deaths / 100 Cases'] = (data['Deaths'] / data['Confirmed']) * 100
data['Recovered / 100 Cases'] = (data['Recovered'] / data['Confirmed']) * 100
data['Deaths / 100 Recovered'] = (data['Deaths'] / data['Recovered']) * 100



# Step 2: Data Cleaning and Preparation
data['7_day_avg'] = data['Confirmed'].rolling(window=7).mean()

# Normalize the data for clustering
scaler = MinMaxScaler()
data['Normalized_Cases'] = scaler.fit_transform(data[['7_day_avg']].fillna(0))

# Step 3: Clustering
# Determine optimal clusters using the Elbow Method
inertia = []
for k in range(1, 10):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(data[['Normalized_Cases']].dropna())
    inertia.append(kmeans.inertia_)

# Plot the Elbow Method graph
plt.figure(figsize=(8, 5))
plt.plot(range(1, 10), inertia, marker='o')
plt.title('Elbow Method for Optimal Clusters')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.grid()
plt.show()

# Apply K-Means clustering with the optimal number of clusters (e.g., 3)
optimal_clusters = 3
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
data['Cluster'] = kmeans.fit_predict(data[['Normalized_Cases']].fillna(0))

# Step 4: Visualization
plt.figure(figsize=(12, 6))
for cluster in range(optimal_clusters):
    cluster_data = data[data['Cluster'] == cluster]
    plt.plot(cluster_data['Date'], cluster_data['7_day_avg'], label=f'Cluster {cluster}')
plt.title('COVID-19 Cases Clustering')
plt.xlabel('Date')
plt.ylabel('7-Day Average Cases')
plt.legend()
plt.grid()
plt.show()

# Display the first few rows of the dataset with cluster labels
data.head()